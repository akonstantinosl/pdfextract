name: Build and Release PDFExtract Windows Installer (EXE)

on:
  push:
    tags:
      - 'v*.*' # Memicu untuk tag seperti v1.0, v1.1, dan juga v1.0.0
  workflow_dispatch: # Memperbolehkan trigger manual
env:
  APP_NAME: "PDFExtract"
  PYTHON_VERSION: "3.12.7"
  POPPLER_VERSION: "25.07.0"
  PYTHON_EMBED_ZIP: "python-3.12.7-embed-amd64.zip"
  POPPLER_ZIP: "Release-25.07.0-0.zip"
  POPPLER_DIR_NAME: "poppler-25.07.0"
  STAGING_DIR: "dist" # Folder sementara untuk menampung semua file installer

jobs:
  build-release:
    runs-on: windows-latest
    
    permissions:
      contents: write # Diperlukan untuk membuat rilis di GitHub

    steps:
    # 1. Mengunduh kode dari repositori
    - name: Checkout repository
      uses: actions/checkout@v4

    # 2. Setup Python untuk menjalankan skrip build
    - name: Set up Python for build scripts
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    # 3. Membuat folder 'dist' sebagai area staging
    - name: Create staging directory
      run: mkdir ${{ env.STAGING_DIR }}

    # 4. Mengunduh dan mengekstrak Python versi embeddable
    - name: Download and extract Python Embeddable
      shell: pwsh
      run: |
        curl.exe -L -o "${{ env.PYTHON_EMBED_ZIP }}" "https://www.python.org/ftp/python/${{ env.PYTHON_VERSION }}/${{ env.PYTHON_EMBED_ZIP }}"
        New-Item -ItemType Directory -Path "${{ env.STAGING_DIR }}\python_embed"
        Expand-Archive -Path "${{ env.PYTHON_EMBED_ZIP }}" -DestinationPath "${{ env.STAGING_DIR }}\python_embed"

    # 5. Mengedit file ._pth agar Python dapat mengimpor 'site'
    - name: Uncomment 'import site' in .pth file
      shell: pwsh
      run: |
        $pth_file = "${{ env.STAGING_DIR }}\python_embed\python312._pth"
        (Get-Content $pth_file) -replace '#import site', 'import site' | Set-Content $pth_file

  # 6. Mengunduh get-pip.py (untuk diinstal oleh pengguna)
    - name: Download get-pip.py for user installation
      shell: pwsh
      run: |
        # Tentukan path untuk get-pip.py di dalam folder staging
        $GET_PIP_PATH = "${{ env.STAGING_DIR }}\get-pip.py"
        
        # Mengunduh get-pip.py ke folder dist
        echo "Downloading get-pip.py to $GET_PIP_PATH..."
        curl.exe -L -o "$GET_PIP_PATH" "https://bootstrap.pypa.io/get-pip.py"
        echo "get-pip.py akan dibundel agar dijalankan di komputer pengguna."

    # 7. Mengunduh dan mengekstrak Poppler untuk rendering PDF
    - name: Download and extract Poppler
      shell: pwsh
      run: |
        curl.exe -L -o "${{ env.POPPLER_ZIP }}" "https://github.com/oschwartz10612/poppler-windows/releases/download/v${{ env.POPPLER_VERSION }}-0/${{ env.POPPLER_ZIP }}"
        New-Item -ItemType Directory -Path "${{ env.STAGING_DIR }}\poppler_bin"
        Expand-Archive -Path "${{ env.POPPLER_ZIP }}" -DestinationPath "${{ env.STAGING_DIR }}\poppler_bin"

    # 8. Menyalin file aplikasi, requirements, dan aset ke folder staging
    - name: Copy application files
      shell: cmd
      run: |
        copy main.py ${{ env.STAGING_DIR }}\main.py
        copy requirements.txt ${{ env.STAGING_DIR }}\requirements.txt
        copy install_libs.bat ${{ env.STAGING_DIR }}\install_libs.bat
        copy assets\img\pdfextract.ico ${{ env.STAGING_DIR }}\pdfextract.ico
        xcopy /E /I /Q models ${{ env.STAGING_DIR }}\models

    # 9. Mengunduh semua library Python (wheels) secara offline
    - name: Download Python wheels
      shell: pwsh # Menggunakan pwsh agar tanda backtick (`) berfungsi
      run: |
        echo "Meng-upgrade pip di runner..."
        python -m pip install --upgrade pip

        echo "Membuat direktori wheels..."
        mkdir ${{ env.STAGING_DIR }}\wheels

        # Langkah 1: Buat file requirements sementara tanpa 'odfpy' dan 'trio'
        echo "Membuat file requirements sementara tanpa source packages (odfpy, trio)..."
        $req_file = "${{ env.STAGING_DIR }}\requirements.txt"
        $temp_req_file = "${{ env.STAGING_DIR }}\temp_binary_reqs.txt"
        
        # Gunakan regex 'atau' (|) untuk mengecualikan keduanya
        Get-Content $req_file | Select-String -Pattern "odfpy|trio" -NotMatch | Set-Content $temp_req_file

        # Langkah 2: Unduh semua library binary yang kompatibel (dari file temp)
        echo "Mengunduh hanya binary wheels..."
        pip download -d ${{ env.STAGING_DIR }}\wheels `
          -r $temp_req_file `
          --platform win_amd64 `
          --python-version 3.12 `
          --abi cp312 `
          --abi abi3 `
          --only-binary=:all:

        # Langkah 3: Unduh 'odfpy' dan 'trio' (source packages) secara terpisah
        echo "Mengunduh Source Packages (odfpy, trio)..."
        pip download -d ${{ env.STAGING_DIR }}\wheels odfpy trio

        # Langkah 4: Unduh pip, setuptools, dan wheel
        echo "Mengunduh pip, setuptools, dan wheel..."
        pip download -d ${{ env.STAGING_DIR }}\wheels pip setuptools wheel

    # 10. Menginstal Inno Setup (software pembuat installer)
    - name: Install Inno Setup
      shell: pwsh
      run: |
        curl.exe -L -o "is-stable.exe" "https://jrsoftware.org/download.php/is.exe?site=1"
        Start-Process -FilePath "is-stable.exe" -ArgumentList "/VERYSILENT", "/SUPPRESSMSGBOXES", "/NORESTART", "/NOCANCEL", "/SP-", "/LOG=inno_setup_install.log" -Wait
        $Env:Path += ";C:\Program Files (x86)\Inno Setup 6"
        
    # 11. Mengunduh file bahasa Indonesia untuk installer
    - name: Download Inno Setup Indonesian Language File
      shell: pwsh
      run: |
        curl.exe -L -o "C:\Program Files (x86)\Inno Setup 6\Languages\Indonesian.isl" "https://github.com/jrsoftware/issrc/raw/main/Files/Languages/Unofficial/Indonesian.isl"
        
    # 12. Mengambil nomor versi dari Git Tag (dan memotong jadi 2-digit)
    - name: Get version from Git tag
      id: get_version
      shell: pwsh
      run: |
        if ("${{ github.ref }}".StartsWith("refs/tags/v")) {
          # Ambil versi penuh dari tag (misal: "1.0.0" atau "1.0")
          $full_version = "${{ github.ref }}".Split('/')[-1].Substring(1)

          # Pisahkan versi berdasarkan titik
          $version_parts = $full_version.Split('.')

          # Ambil dua bagian pertama dan gabungkan kembali
          #    - "1.0.0" -> ["1", "0", "0"] -> (Ambil "1", "0") -> "1.0"
          #    - "1.0"   -> ["1", "0"]     -> (Ambil "1", "0") -> "1.0"
          $short_version = ($version_parts[0..1]) -join '.'

          # Simpan versi 2-digit ini ke GITHUB_ENV
          echo "APP_VERSION=$short_version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "Full tag version: $full_version"
          echo "Using 2-digit version for installer: $short_version"
        } else {
          echo "::error::Workflow ini harus dipicu dengan mendorong tag (misal: 'v1.0'), bukan branch."
          echo "::error::Trigger terdeteksi: ${{ github.ref }}"
          exit 1
        }

    # 13. Menjalankan compiler Inno Setup
    - name: Compile Inno Setup installer
      shell: cmd
      run: |
        cd ${{ github.workspace }}

        REM Definisikan path absolut ke ikon DI DALAM folder 'dist'
        set SETUP_ICON_PATH=%CD%\${{ env.STAGING_DIR }}\pdfextract.ico

        REM Menjalankan compiler Inno Setup (iscc)
        REM /DMyAppVersion mengirimkan versi ke script .iss
        REM /DSetupIconAbsPath mengirimkan path ikon absolut ke script .iss
        iscc.exe "setup.iss" /DMyAppVersion="${{ env.APP_VERSION }}" /DSetupIconAbsPath="%SETUP_ICON_PATH%"

    # 14. Membuat GitHub Release dan mengunggah file Setup.exe
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        name: Release ${{ env.APP_VERSION }}
        files: Output/PDFExtract-Setup-v${{ env.APP_VERSION }}.exe
        
    # 15. (Opsional) Mengunggah installer sebagai artifact build internal
    - name: Upload installer artifact (Internal)
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.APP_NAME }}_Windows_Setup_${{ env.APP_VERSION }}
        path: Output/PDFExtract-Setup-v${{ env.APP_VERSION }}.exe