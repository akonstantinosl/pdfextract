name: Build and Release Windows Installer (EXE)

on:
  push:
    tags:
      - 'v*.*.*' # Memicu HANYA saat tag (misal: v1.0.0) di-push
  workflow_dispatch: # Memperbolehkan trigger manual

env:
  APP_NAME: "PDFExtract"
  PYTHON_VERSION: "3.12.7"
  POPPLER_VERSION: "25.07.0"
  PYTHON_EMBED_ZIP: "python-3.12.7-embed-amd64.zip"
  POPPLER_ZIP: "Release-25.07.0-0.zip"
  POPPLER_DIR_NAME: "poppler-25.07.0"
  STAGING_DIR: "dist" 

jobs:
  build-release:
    runs-on: windows-latest
    
    permissions:
      contents: write # Diperlukan untuk membuat rilis

    steps:
    # 1. Checkout kode
    - name: Checkout repository
      uses: actions/checkout@v4

    # 2. Setup Python (untuk menjalankan pip download)
    - name: Set up Python for build scripts
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    # 3. Buat folder staging 'dist'
    - name: Create staging directory
      run: mkdir ${{ env.STAGING_DIR }}

    # 4. Unduh & Ekstrak Python Embeddable
    - name: Download and extract Python Embeddable
      shell: pwsh
      run: |
        echo "Downloading Python from ${{ env.PYTHON_VERSION }}..."
        curl.exe -L -o "${{ env.PYTHON_EMBED_ZIP }}" "https://www.python.org/ftp/python/${{ env.PYTHON_VERSION }}/${{ env.PYTHON_EMBED_ZIP }}"
        echo "Extracting Python..."
        New-Item -ItemType Directory -Path "${{ env.STAGING_DIR }}\python_embed"
        Expand-Archive -Path "${{ env.PYTHON_EMBED_ZIP }}" -DestinationPath "${{ env.STAGING_DIR }}\python_embed"

    # 5. Edit file .pth (Wajib untuk pip)
    - name: Uncomment 'import site' in .pth file
      shell: pwsh
      run: |
        $pth_file = "${{ env.STAGING_DIR }}\python_embed\python312._pth"
        (Get-Content $pth_file) -replace '#import site', 'import site' | Set-Content $pth_file

    # 6. Unduh get-pip.py
    - name: Download get-pip.py
      shell: pwsh
      run: |
        curl.exe -L -o "${{ env.STAGING_DIR }}\get-pip.py" "https://bootstrap.pypa.io/get-pip.py"

    # 7. Unduh & Ekstrak Poppler
    - name: Download and extract Poppler
      shell: pwsh
      run: |
        echo "Downloading Poppler from ${{ env.POPPLER_VERSION }}..."
        curl.exe -L -o "${{ env.POPPLER_ZIP }}" "https://github.com/oschwartz10612/poppler-windows/releases/download/v${{ env.POPPLER_VERSION }}-0/${{ env.POPPLER_ZIP }}"
        echo "Extracting Poppler..."
        New-Item -ItemType Directory -Path "${{ env.STAGING_DIR }}\poppler_bin"
        Expand-Archive -Path "${{ env.POPPLER_ZIP }}" -DestinationPath "${{ env.STAGING_DIR }}\poppler_bin"

    # 8. Salin file aplikasi ANDA DAN LOGO (DENGAN ERROR CHECK)
    - name: Copy application files
      shell: cmd
      run: |
        copy main.py ${{ env.STAGING_DIR }}\main.py || exit /b 1
        copy requirements.txt ${{ env.STAGING_DIR }}\requirements.txt || exit /b 1
        copy install_libs.bat ${{ env.STAGING_DIR }}\install_libs.bat || exit /b 1
        echo Menyalin logo ke ${{ github.workspace }}\${{ env.STAGING_DIR }}\pdfextract.ico ...
        copy assets\img\pdfextract.ico ${{ env.STAGING_DIR }}\pdfextract.ico || (echo "ERROR: Gagal menyalin logo ke dist" && exit /b 1)
        echo Logo tersalin ke dist.
        echo Menyalin logo ke root (sementara untuk ISCC) ${{ github.workspace }}\pdfextract.ico ...
        copy assets\img\pdfextract.ico .\pdfextract.ico || (echo "ERROR: Gagal menyalin logo ke root" && exit /b 1)
        echo Logo tersalin ke root.
        xcopy /E /I /Q models ${{ env.STAGING_DIR }}\models || exit /b 1

    # 9. Unduh semua 'wheels' (SOLUSI FINAL UNTUK ODFPY)
    - name: Download Python wheels
      shell: pwsh # Menggunakan pwsh agar tanda backtick (`) berfungsi
      run: |
        echo "Meng-upgrade pip di runner..."
        python -m pip install --upgrade pip

        echo "Membuat direktori wheels..."
        mkdir ${{ env.STAGING_DIR }}\wheels

        # Langkah 1: Buat file requirements sementara TANPA 'odfpy'
        echo "Membuat file requirements sementara tanpa odfpy..."
        $req_file = "${{ env.STAGING_DIR }}\requirements.txt"
        $temp_req_file = "${{ env.STAGING_DIR }}\temp_binary_reqs.txt"
        Get-Content $req_file | Select-String -Pattern "odfpy" -NotMatch | Set-Content $temp_req_file

        echo "--- Mengunduh HANYA binary wheels yang kompatibel (dari temp_binary_reqs.txt) ---"
        cat $temp_req_file # Mencetak isi file temp untuk debug

        # Langkah 2: Unduh semua library binary menggunakan file temp. Ini HARUS SUKSES.
        pip download -d ${{ env.STAGING_DIR }}\wheels `
          -r $temp_req_file `
          --platform win_amd64 `
          --python-version 3.12 `
          --abi cp312 `
          --abi abi3 `
          --only-binary=:all:

        echo "--- Mengunduh Source Packages (odfpy dan dependensinya) ---"

        # Langkah 3: Unduh 'odfpy' (dan dependensinya seperti defusedxml) secara terpisah.
        pip download -d ${{ env.STAGING_DIR }}\wheels odfpy

    # 10. Install Inno Setup
    - name: Install Inno Setup
      shell: pwsh
      run: |
        curl.exe -L -o "is-stable.exe" "https://jrsoftware.org/download.php/is.exe?site=1"
        Start-Process -FilePath "is-stable.exe" -ArgumentList "/VERYSILENT", "/SUPPRESSMSGBOXES", "/NORESTART", "/NOCANCEL", "/SP-", "/LOG=inno_setup_install.log" -Wait
        $Env:Path += ";C:\Program Files (x86)\Inno Setup 6"
      
    # 11. Unduh file Bahasa Indonesia
    - name: Download Inno Setup Indonesian Language File
      shell: pwsh
      run: |
        curl.exe -L -o "C:\Program Files (x86)\Inno Setup 6\Languages\Indonesian.isl" "https://github.com/jrsoftware/issrc/raw/main/Files/Languages/Unofficial/Indonesian.isl"
        
    # 11.5. Dapatkan Versi dari Git Tag (DIPERBARUI & AMAN)
    - name: Get version from Git tag
      id: get_version
      shell: pwsh
      run: |
        if ("${{ github.ref }}".StartsWith("refs/tags/v")) {
          # Sukses: Mengambil "1.0.0" dari "refs/tags/v1.0.0"
          $version = "${{ github.ref }}".Split('/')[-1].Substring(1)
          echo "APP_VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "Release version is $version"
        } else {
          # Gagal: Workflow tidak dijalankan pada tag
          echo "::error::Workflow ini harus dipicu dengan mendorong tag (misal: 'v1.0.0'), bukan branch."
          echo "::error::Trigger terdeteksi: ${{ github.ref }}"
          exit 1
        }

    # 12. Jalankan compiler Inno Setup (DIPERBARUI DENGAN PATH IKON ABSOLUT)
    - name: Compile Inno Setup installer
      shell: cmd
      run: |
        REM Pindah ke direktori root repositori
        cd ${{ github.workspace }}
        echo Current directory after cd: %CD%

        REM Verifikasi keberadaan file ikon di direktori root DAN dist
        echo Verifying icon file presence:
        dir pdfextract.ico
        dir ${{ env.STAGING_DIR }}\pdfextract.ico

        REM Mengirimkan nomor versi ke Inno Setup
        iscc.exe "setup.iss" /DMyAppVersion="${{ env.APP_VERSION }}"

    # 12.5 Hapus ikon sementara dari root
    - name: Clean up temporary root icon
      shell: cmd
      run: |
        echo Cleaning up temporary root icon...
        del pdfextract.ico

    # 13. Buat GitHub Release
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        name: Release ${{ env.APP_VERSION }}
        # --- INI ADALAH BARIS YANG DIPERBAIKI ---
        files: Output/PDFExtract-Setup-v${{ env.APP_VERSION }}.exe
        
    # 14. Upload Setup.exe sebagai artifact (Opsional)
    - name: Upload installer artifact (Internal)
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.APP_NAME }}_Windows_Setup_${{ env.APP_VERSION }}
        path: Output/PDFExtract-Setup-v${{ env.APP_VERSION }}.exe